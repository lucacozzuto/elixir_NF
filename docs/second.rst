.. _second-page:

*******************
Launching a pipeline
*******************

You can launch a pipeline by simply executing this code

.. code-block:: console

  nextflow run PIPELINENAME.nf

But is really convenient to store your code in one of the sharing platform that are supported.

Sharing Nextflow code
======================

Nextflow supports a number of code sharing platforms: **BitBucket**, **GitHub**, and **GitLab**.
This feature allows running pipelines by just pointing to an online repository without caring about downloading, installing etc. 
The default platform is **GitHub**, so we will use this repository as an example.

.. |github| image:: images/GitHub-Logo.png
  :width: 200

.. |bitbucket| image:: images/bitbucket-logo.png
  :width: 200
  
.. |gitlab| image:: images/gitlab-logo.jpeg
  :width: 200

.. list-table:: 
   :widths: 50 50 50
   :header-rows: 1

   * - GitHub
     - BitBucket
     - GitLab
   * - |github|
     - |bitbucket|
     - |gitlab|

We can launch the pipeline just by typing:

.. code-block:: console

  nextflow run lucacozzuto/elixir_NF -r main -latest -with-docker

In this way Nextflow will pull the pipeline from the GitHub repository, store it at ``$PATH/.nextflow/assets`` and launch it using the container engine `Docker <https://www.docker.com/>`__, thanks to the Nextflow parameter ``-with-docker``.

Nextflow supports many more container engines like Singularity, Shifter, Podman and Charliecloud. In this example we will use Docker: the default image is stored in `DockerHub <https://hub.docker.com/>`__ and is retrieved on the fly. 

.. code-block:: console

  N E X T F L O W  ~  version 21.04.3
  Pulling lucacozzuto/elixir_NF ...
  downloaded from https://github.com/lucacozzuto/elixir_NF.git
  Launching `lucacozzuto/elixir_NF` [determined_minsky] - revision: 711f9f806d [main]

  BIOCORE@CRG - N F TESTPIPE  ~  version 1.0
  =============================================
  reads                           : /Users/lcozzuto/.nextflow/assets/lucacozzuto/elixir_NF/data/*.fastq.gz
  reference                       : /Users/lcozzuto/.nextflow/assets/lucacozzuto/elixir_NF/data/chr19.fasta.gz
  output				: /Users/lcozzuto/.nextflow/assets/lucacozzuto/elixir_NF/output

  executor >  local (3)
  [2f/6cd1ca] process > fastqc (B7_H3K4me1_s_chr19.fastq.gz) [100%] 2 of 2 ✔
  [55/032373] process > BOWTIE:Index (chr19.fasta.gz)        [  0%] 0 of 1
  [79/f30f70] process > BOWTIE:Align (B7_H3K4me1_s_chr19.fastq.gz) [100%] 2 of 2 ✔
  [50/088302] process > multiqc                                    [100%] 1 of 1 ✔
  /Users/lcozzuto/ooo/work/27/f1cc39c1e01c9ee55684b347c492f5/B7_input_s_chr19.fastq.gz.sam
  /Users/lcozzuto/ooo/work/27/f1cc39c1e01c9ee55684b347c492f5/B7_input_s_chr19.fastq.gz.log
  /Users/lcozzuto/ooo/work/79/f30f7041abf5baf7c496a0982906c1/B7_H3K4me1_s_chr19.fastq.gz.sam
  /Users/lcozzuto/ooo/work/79/f30f7041abf5baf7c496a0982906c1/B7_H3K4me1_s_chr19.fastq.gz.log

  Done! Open the following report in your browser --> /Users/lcozzuto/.nextflow/assets/lucacozzuto/elixir_NF/output/ouptut_multiQC/multiqc_report.html

  Completed at: 24-Nov-2021 15:48:35
  Duration    : 3m 25s
  CPU hours   : 0.1
  Succeeded   : 6

This pipeline can be launched also with Singularity just using the Nextflow parameter ``-with-singularity``. Nextflow will retrieve and convert the image(s) for you. The image(s) will be then stored so that next time you don't need to download anything again.

We can inspect the output in the new ``output`` folder generated.

.. code-block:: console

  ls -alht output
  
  ls -alht
  total 0
  drwxr-xr-x  17 lcozzuto  staff   544B Nov 24 16:18 ..
  drwxr-xr-x   3 lcozzuto  staff    96B Nov 24 16:13 ouptut_multiQC
  drwxr-xr-x   5 lcozzuto  staff   160B Nov 24 16:13 .
  drwxr-xr-x   4 lcozzuto  staff   128B Nov 24 16:13 ouptut_aln
  drwxr-xr-x   6 lcozzuto  staff   192B Nov 24 16:11 ouptut_fastqc


Work folder structure
===============================

Once executed, we can see that a folder named work is generated. Nextflow stores in this folder the intermediate files generated by the processes.
At the start of each row, there is an **alphanumeric code**:

.. code-block:: console
  
  [2f/6cd1ca] process > fastqc (B7_H3K4me1_s_chr19.fastq.gz) [100%] 2 of 2

This code indicates **the path** in which the process is "isolated" and where the corresponding temporary files are kept in the **work** directory. 

.. note::
	**IMPORTANT: Nextflow will randomly generate temporary folders so they will be named differently in your execution!!!**

Let's have a look inside that folder:

.. code-block:: console



You see a lot of "hidden" files:

- **.exitcode**, contains 0 if everything is ok, another value if there was a problem.
- **.command.log**, contains the log of the command execution. It is often identical to `.command.out`
- **.command.out**, contains the standard output of the command execution
- **.command.err**, contains the standard error of the command execution
- **.command.begin**, contains what has to be executed before `.command.sh`
- **.command.sh**, contains the block of code indicated in the process
- **.command.run**, contains the code made by nextflow for the execution of `.command.sh`, and contains environmental variables, eventual invocations of linux containers etc.



Resuming and batch execution
===============================

You can execute again the pipeline by using the Nextflow parameter ``-resume`` and send it to background with ``-bg``. 


.. code-block:: console

  nextflow run lucacozzuto/elixir_NF -with-docker -r main -bg -resume > log
  
  cat log 
  
  N E X T F L O W  ~  version 21.10.3
  Launching `lucacozzuto/elixir_NF` [deadly_kirch] - revision: 040cd63a79 [main]

  BIOCORE@CRG - N F TESTPIPE  ~  version 1.0
  =============================================
  reads                           : /Users/lcozzuto/.nextflow/assets/lucacozzuto/elixir_NF/data/*.fastq.gz
  reference                       : /Users/lcozzuto/.nextflow/assets/lucacozzuto/elixir_NF/data/chr19.fasta.gz
  output				: ./output

  [a2/305aae] Cached process > BOWTIE:Index (chr19.fasta.gz)
  [44/f37380] Cached process > BOWTIE:Align (B7_input_s_chr19.fastq.gz)
  /Users/lcozzuto/ooo/work/44/f37380aa3829516f8537725d579cb5/B7_input_s_chr19.fastq.gz.sam
  /Users/lcozzuto/ooo/work/44/f37380aa3829516f8537725d579cb5/B7_input_s_chr19.fastq.gz.log
  [4d/fb89a8] Cached process > fastqc (B7_input_s_chr19.fastq.gz)
  [f9/0824a8] Cached process > BOWTIE:Align (B7_H3K4me1_s_chr19.fastq.gz)
  /Users/lcozzuto/ooo/work/f9/0824a8b50fde310379ba91aeceb946/B7_H3K4me1_s_chr19.fastq.gz.log
  /Users/lcozzuto/ooo/work/f9/0824a8b50fde310379ba91aeceb946/B7_H3K4me1_s_chr19.fastq.gz.sam
  [89/ab8f30] Cached process > fastqc (B7_H3K4me1_s_chr19.fastq.gz)
  [f5/3c2e82] Cached process > multiqc

  Done! Open the following report in your browser --> ./output/ouptut_multiQC/multiqc_report.html

Reporting and monitoring
=========================
Before going to the code we can have a look 
